{
    "1" : {
        "number" : "1",
        "title" : "Two Sum",
        "tags" : ["array", "hash table", "dictionary"],
        "difficulty" : "easy",
        "date" : "2024-1-18",
        "solution" : "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        diffs = {}\n\n        for i,e in enumerate(nums):\n            diffs[target - e] = i\n        \n        for i in range(len(nums)):\n            if nums[i] in diffs:\n                if diffs[nums[i]] != i:\n                    return sorted([diffs[nums[i]], i])",
        "language" : "python"
    },
    "2" : {
        "number" : "2",
        "title" : "Add Two Numbers",
        "tags" : ["linked list", "math", "recursion"],
        "difficulty" : "medium",
        "date" : "2024-1-18",
        "solution" : "class Solution:\n    def addNode(self, tail, val):\n        tail.next = ListNode(val=val)\n        return tail.next\n\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        carry = 0\n        power = 0\n\n        # dummy head node\n        dummy_head = ListNode()\n        tail = dummy_head\n\n        while l1 or l2 or carry:\n            digit_sum = 0\n            if l1:\n                digit_sum += l1.val\n                l1 = l1.next\n            if l2:\n                digit_sum += l2.val\n                l2 = l2.next\n            digit_sum += carry\n            carry = 0\n            if digit_sum > 9:\n                carry = 1\n                digit_sum -= 10\n            tail = self.addNode(tail, digit_sum)\n\n        return dummy_head.next",
        "language" : "python"
    },
    "1627" : {
        "number" : "1627",
        "title" : "Graph Connectivity With Threshold",
        "tags" : ["array", "math", "union find", "number theory"],
        "difficulty" : "hard",
        "date" : "2024-1-17",
        "solution" : "from math import gcd\n\nclass Solution:\n    def union(self, a, b):\n        # combine the components of these two nodes\n        a_parent = self.find(a)\n        b_parent = self.find(b)\n\n        if a_parent == b_parent:\n            return\n        \n        # put smaller under larger\n        if self.size[a_parent] > self.size[b_parent]:\n            # a is bigger than b, put b under a\n            self.parent[b_parent] = a_parent\n            self.size[a_parent] += self.size[b_parent]\n        else:\n            # b is bigger than a, put a under b\n            self.parent[a_parent] = b_parent\n            self.size[b_parent] += self.size[a_parent]\n\n        \n\n    def find(self, a):\n        # find parent of this node\n        while self.parent[a] != a:\n            a = self.parent[a]\n        return a\n\n    def connected(self, a, b):\n        return self.find(a) == self.find(b)\n\n    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n        # edge case\n        if threshold == 0:\n            return [True] * len(queries)\n\n        road_exists = lambda x, y : gcd(x,y) > threshold\n\n        # offset size and parent lists by 1 to make indexing work\n        self.parent = [-1] + [i for i in range(1,n+1)]\n        self.size = [-1] + [1 for i in range(1,n+1)]\n        \n        for i in range(threshold,n):\n            for j in range(i+1,n+1):\n                if road_exists(i,j):\n                    self.union(i,j)\n\n        out = []\n\n        for (start, end) in queries:\n            connected = self.connected(start, end)\n            out.append(connected)\n\n        return out",
        "language" : "python"
    },
    "41" : {
        "number" : "41",
        "title" : "First Missing Positive",
        "tags" : ["array", "hash table"],
        "difficulty" : "hard",
        "date" : "2024-1-19",
        "solution" : "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        i = 0\n        while i < len(nums):\n            correct_location = nums[i] - 1\n            if 0 < nums[i] <= len(nums) and nums[i] != nums[correct_location]:\n                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n            else:\n                i += 1\n        \n        print(nums)\n        for i, e in enumerate(nums):\n            if i+1 != e:\n                return i+1\n        \n        return len(nums) + 1",
        "language" : "python"
    }
}