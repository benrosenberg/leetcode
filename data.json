{
    "1": {
        "number": "1",
        "title": "Two Sum",
        "tags": [
            "array",
            "hash table",
            "dictionary"
        ],
        "difficulty": "easy",
        "date": "2024-01-18",
        "solutions": [
            {
                "date" : "2024-01-18",
                "solution" : "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        diffs = {}\n\n        for i,e in enumerate(nums):\n            diffs[target - e] = i\n        \n        for i in range(len(nums)):\n            if nums[i] in diffs:\n                if diffs[nums[i]] != i:\n                    return sorted([diffs[nums[i]], i])",
                "language": "python"
            },
            {
                "date" : "2024-01-20",
                "solution" : "class Solution:\n    def addNode(self, tail, val):\n        tail.next = ListNode(val=val)\n        return tail.next\n\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        carry = 0\n        power = 0\n\n        # dummy head node\n        dummy_head = ListNode()\n        tail = dummy_head\n\n        while l1 or l2 or carry:\n            digit_sum = 0\n            if l1:\n                digit_sum += l1.val\n                l1 = l1.next\n            if l2:\n                digit_sum += l2.val\n                l2 = l2.next\n            digit_sum += carry\n            carry = 0\n            if digit_sum > 9:\n                carry = 1\n                digit_sum -= 10\n            tail = self.addNode(tail, digit_sum)\n\n        return dummy_head.next",
                "language": "python"
            },
            {
                "date" : "2024-01-18",
                "solution" : "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        diffs = {}\n\n        for i,e in enumerate(nums):\n            diffs[target - e] = i\n        \n        for i in range(len(nums)):\n            if nums[i] in diffs:\n                if diffs[nums[i]] != i:\n                    return sorted([diffs[nums[i]], i])",
                "language": "python"
            },
            {
                "date" : "2024-01-20",
                "solution" : "CLASS SOLUTION:\n    DEF TWOSUM(SELF, NUMS: LIST[INT], TARGET: INT) -> LIST[INT]:\n        DIFFS = {}\n\n        FOR I,E IN ENUMERATE(NUMS):\n            DIFFS[TARGET - E] = I\n        \n        FOR I IN RANGE(LEN(NUMS)):\n            IF NUMS[I] IN DIFFS:\n                IF DIFFS[NUMS[I]] != I:\n                    RETURN SORTED([DIFFS[NUMS[I]], I])",
                "language": "rust"
            }
        ]
    },
    "2": {
        "number": "2",
        "title": "Add Two Numbers",
        "tags": [
            "linked list",
            "math",
            "recursion"
        ],
        "difficulty": "medium",
        "date": "2024-01-18",
        "solutions": [
            {
                "date" : "2024-01-18",
                "solution" : "class Solution:\n    def addNode(self, tail, val):\n        tail.next = ListNode(val=val)\n        return tail.next\n\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        carry = 0\n        power = 0\n\n        # dummy head node\n        dummy_head = ListNode()\n        tail = dummy_head\n\n        while l1 or l2 or carry:\n            digit_sum = 0\n            if l1:\n                digit_sum += l1.val\n                l1 = l1.next\n            if l2:\n                digit_sum += l2.val\n                l2 = l2.next\n            digit_sum += carry\n            carry = 0\n            if digit_sum > 9:\n                carry = 1\n                digit_sum -= 10\n            tail = self.addNode(tail, digit_sum)\n\n        return dummy_head.next",
                "language": "python"
            }
        ]
    },
    "41": {
        "number": "41",
        "title": "First Missing Positive",
        "tags": [
            "array",
            "hash table"
        ],
        "difficulty": "hard",
        "date": "2024-01-19",
        "solutions": [
            {
                "date": "2024-01-19",
                "solution": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        i = 0\n        while i < len(nums):\n            correct_location = nums[i] - 1\n            if 0 < nums[i] <= len(nums) and nums[i] != nums[correct_location]:\n                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n            else:\n                i += 1\n        \n        print(nums)\n        for i, e in enumerate(nums):\n            if i+1 != e:\n                return i+1\n        \n        return len(nums) + 1",
                "language": "python"
            }
        ]
    },
    "506": {
        "number" : "506",
        "title" : "Relative Ranks",
        "tags": [
            "array",
            "hash table"
        ],
        "difficulty" : "easy",
        "date" : "2024-01-28",
        "solutions": [
            {
                "date" : "2024-01-28",
                "solution" : "class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        s=[(i,n)for i,n in enumerate(score)]\n        s=sorted(s,key=lambda x:x[1])[::-1]\n        t,m=score,' Medal'\n        for i in range(len(s)):\n            j=s[i][0]\n            if i==0:t[j]='Gold'+m\n            elif i==1:t[j]='Silver'+m\n            elif i==2:t[j]='Bronze'+m\n            else:t[j]=str(i+1)\n        return t",
                "language" : "python"
            },
            {
                "date" : "2024-05-07",
                "solution": "impl Solution {\n    pub fn find_relative_ranks(score: Vec<i32>) -> Vec<String> {\n        let n = (&score).len();\n        let mut answer: Vec<String> = vec![String::from(\"\"); n];\n        let mut score_index_vec: Vec<(i32, i32)> = Vec::new();\n        for i in 0..n {\n            score_index_vec.push((score[i], i as i32));\n        }\n        score_index_vec.sort_by(|a,b| b.0.cmp(&a.0));\n        for i in 0..n {\n            let tup = score_index_vec[i];\n            // println!(\"{}:{}\", tup.0, tup.1);\n            let place: String = match i {\n                0 => String::from(\"Gold Medal\"),\n                1 => String::from(\"Silver Medal\"),\n                2 => String::from(\"Bronze Medal\"),\n                x => (x+1).to_string()\n            };\n            // println!(\"Place: {}\", place);\n            answer[tup.1 as usize] += &place;\n        }\n        return answer;\n    }\n}",
                "language" : "rust"
            }
        ]
    }
}